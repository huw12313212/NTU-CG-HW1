#version 120


// varying: interpolate on fragments
varying vec3 normal_cameraspace, vertexPosition_cameraspace, fragcolor;

// constant for the whole mesh
uniform mat4 normat;
uniform mat4 M;
uniform mat4 V;
uniform vec3 ligposwld;
uniform vec3 ligcolor;

//varying out vec3 normal, vert;

void main(void){
vec3 lightPosition_cameraspace = ( V * vec4( ligposwld, 1.0 ) ).xyz;
vec3 viewDirection_cameraspace = -vertexPosition_cameraspace;
vec3 lightDirection_cameraspace = viewDirection_cameraspace + lightPosition_cameraspace;
vec3 L = normalize(lightDirection_cameraspace);
vec3 N = normalize(normal_cameraspace);
float cosTheta = max( dot(L, N), 0.0 );
vec3 ambientColor = fragcolor * 0.1;
vec3 diffuseColor = fragcolor * ligcolor * cosTheta;
vec3 R = normalize(reflect(-L, N));
vec3 E = normalize(viewDirection_cameraspace);
int n = 3;
vec3 specularColor = ligcolor * pow(max(dot(R, E), 0.0), n);
gl_FragColor = vec4((ambientColor + diffuseColor + specularColor), 1.0);

}